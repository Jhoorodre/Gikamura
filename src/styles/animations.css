/* ========================================================================== */
/* ==                      ANIMAÇÕES OTIMIZADAS DA APLICAÇÃO              == */
/* ========================================================================== */
/*
 * Este arquivo define um conjunto de animações reutilizáveis para a interface.
 * Inclui animações de entrada, efeitos de hover e indicadores de loading.
 * O objetivo é criar uma experiência de usuário fluida e agradável.
*/


/* ========================================================================== */
/* == 1. ANIMAÇÕES DE ENTRADA                                            == */
/* ========================================================================== */
/*
 * Classes para aplicar em elementos que devem aparecer de forma suave
 * quando são renderizados na tela.
*/

/* Aparecimento gradual (fade in) */
.fade-in {
  opacity: 0;
  animation: fadeIn var(--transition-fast) ease-out forwards;
}

/* Deslizar de baixo para cima com fade */
.slide-in-up {
  opacity: 0;
  transform: translateY(20px);
  animation: slideInUp var(--transition-base) ease-out forwards;
}

/* Deslizar da esquerda para a direita com fade */
.slide-in-left {
  opacity: 0;
  transform: translateX(-20px);
  animation: slideInLeft var(--transition-base) ease-out forwards;
}

/* Deslizar da direita para a esquerda com fade */
.slide-in-right {
  opacity: 0;
  transform: translateX(20px);
  animation: slideInRight var(--transition-base) ease-out forwards;
}

/* Transição suave entre telas principais */
.view-container {
  animation: fadeIn 0.5s ease-out forwards;
}


/* ========================================================================== */
/* == 2. ANIMAÇÃO ESCALONADA (STAGGER)                                   == */
/* ========================================================================== */
/*
 * Aplica uma animação de entrada em uma lista de elementos com um pequeno
 * atraso (delay) entre cada item, criando um efeito cascata.
 *
 * Uso: Adicione a classe `.stagger-animation` ao container pai e um
 * estilo inline `--stagger-index: N` em cada filho, onde N é o índice.
 * Ex: <div style="--stagger-index: 1;">...</div>
*/
.stagger-animation > * {
  opacity: 0;
  transform: translateY(20px);
  animation: slideInUp var(--transition-base) ease-out forwards;
  /* Calcula o delay baseado no índice do elemento. 50ms por item. */
  animation-delay: calc(var(--stagger-index, 0) * 50ms);
}


/* ========================================================================== */
/* == 3. KEYFRAMES (DEFINIÇÕES DAS ANIMAÇÕES)                            == */
/* ========================================================================== */

@keyframes fadeIn {
  to { opacity: 1; }
}

@keyframes slideInUp {
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideInLeft {
  to { opacity: 1; transform: translateX(0); }
}

@keyframes slideInRight {
  to { opacity: 1; transform: translateX(0); }
}


/* ========================================================================== */
/* == 4. EFEITOS DE HOVER (INTERAÇÃO)                                    == */
/* ========================================================================== */

/* Eleva o elemento sutilmente ao passar o mouse */
.hover-lift {
  transition: transform var(--transition-base);
}
.hover-lift:hover {
  transform: translateY(-2px);
}

/* Aumenta a escala do elemento sutilmente ao passar o mouse */
.hover-scale {
  transition: transform var(--transition-base);
}
.hover-scale:hover {
  transform: scale(1.02);
}


/* ========================================================================== */
/* == 5. ANIMAÇÕES DE LOADING                                            == */
/* ========================================================================== */

/* Animação de pulso para esqueletos de UI (skeleton loaders) */
.pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

/* Animação de rotação para ícones de spinner */
.spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* ========================================================================== */
/* == 6. ACESSIBILIDADE: REDUZIR MOVIMENTO                               == */
/* ========================================================================== */
/*
 * Respeita a preferência do usuário para reduzir ou desativar animações.
 * Remove animações e transições em elementos críticos para a interação.
*/
@media (prefers-reduced-motion: reduce) {
  .fade-in,
  .slide-in-up,
  .slide-in-left,
  .slide-in-right,
  .stagger-animation > *,
  .pulse,
  .spin {
    animation: none !important;
    transition: none !important;
  }
  /* Otimização: desativa animações de fundo e partículas para acessibilidade */
  .animated-bg,
  .particle {
    animation: none;
  }
}

/* ========================================================================== */
/* == SEPARAÇÃO DE ANIMAÇÕES CRÍTICAS E NÃO-CRÍTICAS                      == */
/* ========================================================================== */
/*
 * Animações não essenciais podem ser carregadas sob demanda via JS
 * para otimizar o desempenho inicial da aplicação.
*/

.media-card {
  will-change: transform;
  transition: transform 200ms ease;
}
